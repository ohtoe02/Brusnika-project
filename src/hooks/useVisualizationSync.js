import { useEffect, useRef, useCallback } from 'react'
import { useVisualizationSettings } from '../contexts/VisualizationSettingsContext'

/**
 * –•—É–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export const useVisualizationSync = (visualizationInstance, enabled = true) => {
  const { treeConfig, subscribe } = useVisualizationSettings()
  const previousConfigRef = useRef(null)
  const unsubscribeRef = useRef(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const applySettingsToVisualization = useCallback((config, changedKey = null, changedValue = null) => {
    if (!visualizationInstance?.current || !enabled) return

    const instance = visualizationInstance.current

    try {
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log('üîÑ Applying visualization settings:', { config, changedKey, changedValue })

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ
      const needsFullUpdate = !changedKey || !previousConfigRef.current

      if (needsFullUpdate) {
        // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (typeof instance.updateSettings === 'function') {
          instance.updateSettings(config)
        } else if (typeof instance.applyConfig === 'function') {
          instance.applyConfig(config)
        }
        console.log('‚úÖ Applied full visualization config update:', config)
      } else {
        // –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        switch (changedKey) {
          case 'gridEnabled':
          case 'gridSize':
          case 'gridOpacity':
          case 'gridColor':
          case 'majorGridEnabled':
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ç–∫—É
            if (typeof instance.updateGrid === 'function') {
              instance.updateGrid(config.grid)
            } else if (typeof instance.updateSettings === 'function') {
              instance.updateSettings({ grid: config.grid })
            }
            break



          case 'nodeSize':
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —É–∑–ª–æ–≤
            if (typeof instance.updateNodeSizes === 'function') {
              instance.updateNodeSizes(config.nodeSize)
            } else if (typeof instance.updateSettings === 'function') {
              instance.updateSettings({ nodeSize: config.nodeSize })
            }
            break



          default:
            // –û–±—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            console.log('üîÑ General settings update for:', changedKey)
            if (typeof instance.updateSettings === 'function') {
              instance.updateSettings(config)
            }
        }

        console.log(`‚úÖ Applied partial visualization update for ${changedKey}:`, changedValue)
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (typeof instance.redraw === 'function') {
        instance.redraw()
      } else if (typeof instance.update === 'function') {
        instance.update()
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      previousConfigRef.current = { ...config }

    } catch (error) {
      console.error('Error applying visualization settings:', error)
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      try {
        if (typeof instance.updateSettings === 'function') {
          instance.updateSettings(config)
        }
      } catch (fallbackError) {
        console.error('Fallback update also failed:', fallbackError)
      }
    }
  }, [visualizationInstance, enabled])

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üîÑ useVisualizationSync effect running, enabled:', enabled)
    console.log('üîÑ visualizationInstance?.current:', !!visualizationInstance?.current)
    
    if (!enabled) {
      console.log('üîÑ Sync disabled, skipping subscription')
      return
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (treeConfig && visualizationInstance?.current) {
      console.log('üîÑ Applying initial config:', treeConfig)
      applySettingsToVisualization(treeConfig)
    }

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –±—É–¥—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    console.log('üîÑ Subscribing to settings changes...')
    unsubscribeRef.current = subscribe((newConfig, changedKey, changedValue) => {
      console.log('üîÑ Settings change received in hook:', { newConfig, changedKey, changedValue })
      applySettingsToVisualization(newConfig, changedKey, changedValue)
    })
    
    console.log('üîÑ Subscription created:', !!unsubscribeRef.current)

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
    return () => {
      console.log('üîÑ Cleaning up subscription')
      if (unsubscribeRef.current) {
        unsubscribeRef.current()
        unsubscribeRef.current = null
      }
    }
  }, [subscribe, applySettingsToVisualization, enabled, treeConfig])

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (unsubscribeRef.current) {
        unsubscribeRef.current()
      }
    }
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const forceUpdate = useCallback(() => {
    if (visualizationInstance?.current && treeConfig) {
      applySettingsToVisualization(treeConfig)
    }
  }, [visualizationInstance, treeConfig, applySettingsToVisualization])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const checkSync = useCallback(() => {
    const isConnected = !!(
      visualizationInstance?.current && 
      unsubscribeRef.current &&
      enabled
    )
    
    return {
      isConnected,
      hasInstance: !!visualizationInstance?.current,
      hasSubscription: !!unsubscribeRef.current,
      isEnabled: enabled,
      currentConfig: previousConfigRef.current
    }
  }, [visualizationInstance, enabled])

  return {
    forceUpdate,
    checkSync,
    currentConfig: previousConfigRef.current,
    isConnected: checkSync().isConnected
  }
}

/**
 * –•—É–∫ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π)
 */
export const useMultiVisualizationSync = (visualizationInstances = [], enabled = true) => {
  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ö—É–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  const syncResults = []
  for (let i = 0; i < visualizationInstances.length; i++) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    syncResults.push(useVisualizationSync(visualizationInstances[i], enabled))
  }

  const forceUpdateAll = useCallback(() => {
    syncResults.forEach(result => result.forceUpdate())
  }, [syncResults])

  const checkSyncAll = useCallback(() => {
    return syncResults.map(result => result.checkSync())
  }, [syncResults])

  return {
    forceUpdateAll,
    checkSyncAll,
    syncResults,
    allConnected: syncResults.every(result => result.isConnected)
  }
}

/**
 * –•—É–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export const useVisualizationDebug = () => {
  const { settings, treeConfig } = useVisualizationSettings()

  useEffect(() => {
    if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
      console.group('üé® Visualization Settings Debug')
      console.log('Raw Settings:', settings)
      console.log('Tree Config:', treeConfig)
      console.log('Settings Categories:', Object.keys(settings).reduce((acc, key) => {
        const category = key.startsWith('grid') ? 'grid' : 
                        key.startsWith('node') ? 'node' :
                        key.startsWith('animation') ? 'animation' : 'other'
        acc[category] = acc[category] || []
        acc[category].push({ key, value: settings[key] })
        return acc
      }, {}))
      console.groupEnd()
    }
  }, [settings, treeConfig])

  return { settings, treeConfig }
} 