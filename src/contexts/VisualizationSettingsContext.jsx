import { createContext, useContext, useEffect, useState, useCallback, useMemo } from 'react'
import { TREE_CONFIG } from '../constants/treeConfig'

// –¢–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
const SETTING_CATEGORIES = {
  LAYOUT: 'layout',
  GRID: 'grid'
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
const SETTINGS_SCHEMA = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
  nodeSize: { 
    category: SETTING_CATEGORIES.LAYOUT,
    defaultValue: { width: 50, height: 50 },
    validate: (value) => value.width >= 20 && value.width <= 200
  },
  spacing: {
    category: SETTING_CATEGORIES.LAYOUT,
    defaultValue: { horizontal: 200, vertical: 80 },
    validate: (value) => value.horizontal >= 50 && value.vertical >= 30
  },
  

  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏
  gridEnabled: {
    category: SETTING_CATEGORIES.GRID,
    defaultValue: true,
    validate: (value) => typeof value === 'boolean'
  },
  gridSize: {
    category: SETTING_CATEGORIES.GRID,
    defaultValue: 20,
    validate: (value) => value >= 5 && value <= 100
  },
  gridOpacity: {
    category: SETTING_CATEGORIES.GRID,
    defaultValue: 0.15,
    validate: (value) => value >= 0 && value <= 1
  },
  gridColor: {
    category: SETTING_CATEGORIES.GRID,
    defaultValue: '#6b7280',
    validate: (value) => /^#[0-9A-F]{6}$/i.test(value)
  },
  majorGridEnabled: {
    category: SETTING_CATEGORIES.GRID,
    defaultValue: true,
    validate: (value) => typeof value === 'boolean'
  },
  


}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const VisualizationSettingsContext = createContext()

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useVisualizationSettings = () => {
  const context = useContext(VisualizationSettingsContext)
  if (!context) {
    throw new Error('useVisualizationSettings must be used within a VisualizationSettingsProvider')
  }
  return context
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const getDefaultSettings = () => {
  const defaults = {}
  Object.entries(SETTINGS_SCHEMA).forEach(([key, config]) => {
    defaults[key] = config.defaultValue
  })
  return defaults
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const validateSetting = (key, value) => {
  const schema = SETTINGS_SCHEMA[key]
  if (!schema) return false
  return schema.validate ? schema.validate(value) : true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage
const loadSettingsFromStorage = () => {
  try {
    const stored = localStorage.getItem('visualization-settings')
    if (stored) {
      const parsed = JSON.parse(stored)
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const validated = {}
      Object.entries(parsed).forEach(([key, value]) => {
        if (SETTINGS_SCHEMA[key] && validateSetting(key, value)) {
          validated[key] = value
        }
      })
      return { ...getDefaultSettings(), ...validated }
    }
  } catch (error) {
    console.warn('Error loading settings from localStorage:', error)
  }
  return getDefaultSettings()
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
const saveSettingsToStorage = (settings) => {
  try {
    localStorage.setItem('visualization-settings', JSON.stringify(settings))
  } catch (error) {
    console.warn('Error saving settings to localStorage:', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç TREE_CONFIG
const mapSettingsToTreeConfig = (settings) => {
  const config = { ...TREE_CONFIG }
  
  // –†–∞–∑–º–µ—Ä—ã —É–∑–ª–æ–≤
  if (settings.nodeSize) {
    config.nodeSize = settings.nodeSize
  }
  
  // –†–∞—Å—Å—Ç–æ—è–Ω–∏—è
  if (settings.spacing) {
    config.spacing = {
      ...config.spacing,
      horizontal: settings.spacing.horizontal,
      vertical: settings.spacing.vertical
    }
  }
  


  
  // –°–µ—Ç–∫–∞
  config.grid = {
    ...config.grid,
    enabled: settings.gridEnabled,
    size: settings.gridSize,
    opacity: {
      light: settings.gridOpacity,
      dark: settings.gridOpacity * 0.7
    },
    color: {
      light: settings.gridColor,
      dark: settings.gridColor
    },
    majorGrid: {
      ...config.grid.majorGrid,
      enabled: settings.majorGridEnabled
    }
  }
  

  
  return config
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const VisualizationSettingsProvider = ({ children }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [settings, setSettings] = useState(() => loadSettingsFromStorage())
  
  // –°–ø–∏—Å–æ–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const [listeners, setListeners] = useState(new Set())
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const updateSetting = useCallback((key, value) => {
    console.log('üîß VisualizationSettings.updateSetting called:', { key, value })
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    if (!validateSetting(key, value)) {
      console.warn(`Invalid value for setting ${key}:`, value)
      alert(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è ${key}: ${value}`)
      return false
    }
    
    setSettings(prevSettings => {
      const newSettings = { ...prevSettings, [key]: value }
      console.log('üîß New settings state:', newSettings)
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      const treeConfig = mapSettingsToTreeConfig(newSettings)
      console.log('üå≤ Generated tree config:', treeConfig)
      console.log('üîß Number of listeners:', listeners.size)
      
      listeners.forEach((listener, index) => {
        console.log(`üì¢ Notifying listener ${index}:`, listener)
        try {
          listener(treeConfig, key, value)
          console.log(`‚úÖ Listener ${index} notified successfully`)
        } catch (error) {
          console.error(`‚ùå Error notifying listener ${index}:`, error)
        }
      })
      
      return newSettings
    })
    
    return true
  }, [listeners])
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const updateSettings = useCallback((updates) => {
    const validUpdates = {}
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    Object.entries(updates).forEach(([key, value]) => {
      if (validateSetting(key, value)) {
        validUpdates[key] = value
      } else {
        console.warn(`Invalid value for setting ${key}:`, value)
      }
    })
    
    setSettings(prevSettings => {
      const newSettings = { ...prevSettings, ...validUpdates }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      const treeConfig = mapSettingsToTreeConfig(newSettings)
      listeners.forEach(listener => listener(treeConfig, null, validUpdates))
      
      return newSettings
    })
  }, [listeners])
  
  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const resetSettings = useCallback(() => {
    const defaultSettings = getDefaultSettings()
    setSettings(defaultSettings)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    const treeConfig = mapSettingsToTreeConfig(defaultSettings)
    listeners.forEach(listener => listener(treeConfig, null, defaultSettings))
  }, [listeners])
  
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const subscribe = useCallback((listener) => {
    setListeners(prev => new Set([...prev, listener]))
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      setListeners(prev => {
        const newSet = new Set(prev)
        newSet.delete(listener)
        return newSet
      })
    }
  }, [])
  
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getSettingsByCategory = useCallback((category) => {
    const categorySettings = {}
    Object.entries(SETTINGS_SCHEMA).forEach(([key, config]) => {
      if (config.category === category) {
        categorySettings[key] = settings[key]
      }
    })
    return categorySettings
  }, [settings])
  
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ—Ä–µ–≤–∞
  const treeConfig = useMemo(() => mapSettingsToTreeConfig(settings), [settings])
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    saveSettingsToStorage(settings)
  }, [settings])
  
  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
  useEffect(() => {
    const handleStorageChange = (e) => {
      if (e.key === 'visualization-settings' && e.newValue) {
        try {
          setSettings(loadSettingsFromStorage()) // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        } catch (error) {
          console.warn('Error parsing settings from storage event:', error)
        }
      }
    }
    
    window.addEventListener('storage', handleStorageChange)
    return () => window.removeEventListener('storage', handleStorageChange)
  }, [])
  
  const value = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    settings,
    treeConfig,
    
    // Actions
    updateSetting,
    updateSettings,
    resetSettings,
    subscribe,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getSettingsByCategory,
    validateSetting,
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    SETTING_CATEGORIES,
    SETTINGS_SCHEMA
  }
  
  return (
    <VisualizationSettingsContext.Provider value={value}>
      {children}
    </VisualizationSettingsContext.Provider>
  )
} 